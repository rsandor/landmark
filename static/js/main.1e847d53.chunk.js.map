{"version":3,"sources":["reducers/util.js","reducers/settings.js","reducers/Reducer.js","component/App/App.props.js","component/Staff/Staff.js","component/Staff/index.js","component/App/App.js","component/App/index.js","serviceWorker.js","reducers/root.js","store.js","index.js"],"names":["noop","type","payload","actionLog","method","action","message","prefix","exclude","Set","has","isString","isEmpty","startsWith","ActionLog","console","log","bind","warn","error","Settings","namespace","initialState","this","_initialState","actions","Map","validators","name","reducer","set","validator","get","err","defaultsDeep","state","oldObject","newValues","next","Object","assign","foo","toggle","settings","dispatch","getStaffImage","note","clef","VF","Vex","Flow","div","document","createElement","renderer","Renderer","Backends","SVG","resize","context","getContext","treble","Stave","addClef","setContext","draw","bass","connector","StaveConnector","setType","brace","notes","StaveNote","keys","duration","voice","Voice","num_beats","beat_value","addTickables","Formatter","joinVoices","format","src","XMLSerializer","serializeToString","querySelector","window","btoa","Staff","component","id","className","notesByClef","ConnectedApp","props","visible","onClick","onClickHandler","replace","toUpperCase","setState","prev","Math","random","noteIndex","length","Component","App","reactRedux","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","rootReducer","combineReducers","settingsReducer","store","createStore","storedState","localStorage","getItem","JSON","parse","loadSavedState","subscribe","getState","setItem","stringify","saveStateDev","reset","removeItem","reload","ReactDOM","render","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1e847d53.chunk.js","sourcesContent":["import isEmpty from 'lodash/isNil'\nimport isString from 'lodash/isString'\n\n/**\n * No operation action. Can be returned by action generators on invalid\n * payloads, etc.\n */\nexport const noop = { type: '', payload: {} }\n\n/**\n * Helper method for handling object updates within reducers.\n * @param {object} oldObject Object to update.\n * @param {object} newValues New values for the object.\n * @return {object} A copy of the old object with new values.\n */\nexport function updateObject (oldObject, newValues) {\n  return Object.assign({}, oldObject, newValues)\n}\n\n/**\n * Logs an action and message via the given logging method.\n * @param {function} method Logging method to use.\n * @param {object} action Redux action.\n * @param {string} message Log message.\n * @param {string} prefix Prefix filter.\n * @param {array<string>} exclude Actions to exclude from logging.\n */\nfunction actionLog (method, action, message = '', prefix = null, exclude = []) {\n  const excludeSet = new Set(exclude)\n  if (excludeSet.has(action.type)) {\n    return\n  }\n  if (isString(prefix) && !isEmpty(prefix) && !action.type.startsWith(prefix)) {\n    return\n  }\n  method(action.type, action.payload, message)\n}\n\n/**\n * Console logger for actions.\n * @author Ryan Sandor Richards\n */\nexport class ActionLog {\n  /**\n   * Logs the given redux action via `console.log`.\n   * @param {object} action Redux action to log.\n   * @param {string} message Message.\n   */\n  static log (action, message, prefix, exclude) {\n    actionLog(console.log.bind(console), action, message, prefix, exclude)\n  }\n\n  /**\n   * Logs the given redux action and message via `console.warn`.\n   * @param {object} action Redux action.\n   * @param {string} message Message.\n   */\n  static warn (action, message, prefix, exclude) {\n    actionLog(console.warn.bind(console), action, message, prefix, exclude)\n  }\n\n  /**\n   * Logs the given redux action and message via `console.error`.\n   * @param {object} action Redux action.\n   * @param {string} message Message.\n   */\n  static error (action, message, prefix, exclude) {\n    actionLog(console.error.bind(console), action, message, prefix, exclude)\n  }\n}\n","import Reducer from './Reducer'\n\nconst Settings = new Reducer('NesStudio/sprite', {\n  foo: 'bar'\n})\n\nconst toggle = Settings.action('toggle', (next, payload, action) => {\n  next.foo = next.foo === 'bar' ? 'baz' : 'bar'\n})\n\nexport default Settings.reducer\nexport { toggle }\n","import { ActionLog, noop, updateObject } from './util'\nimport defaultsDeep from 'lodash/defaultsDeep'\n\nexport default class Reducer {\n  constructor (namespace, initialState = {}) {\n    this.namespace = namespace\n    this._initialState = initialState\n    this.actions = new Map()\n    this.validators = new Map()\n    this.log = false\n  }\n\n  get initialState () {\n    return defaultsDeep({}, this._initialState)\n  }\n\n  toggleLog () {\n    this.log = !this.log\n  }\n\n  action (name, reducer) {\n    if (!reducer) {\n      return this.actions.get(name)\n    }\n    this.actions.set(`${this.namespace}/${name}`, reducer)\n    return (payload = {}) => {\n      const action = { type: `${this.namespace}/${name}`, payload }\n      try {\n        const validator = this.validators.get(name) || (() => { })\n        validator(payload)\n        return action\n      } catch (err) {\n        ActionLog.error(action, err)\n        return noop\n      }\n    }\n  }\n\n  validate (name, validator) {\n    this.validators.set(`${this.namespace}/${name}`, validator)\n  }\n\n  get reducer () {\n    return (state, action) => {\n      if (this.log) ActionLog.log(action)\n      const next = updateObject(state || this.initialState, {})\n      if (this.actions.has(action.type)) {\n        this.actions.get(action.type)(next, action.payload, action)\n      }\n      return next\n    }\n  }\n}\n","import * as reactRedux from 'react-redux'\nimport { toggle } from '../../reducers/settings'\n\nfunction state (state) {\n  return { settings: state.settings }\n}\n\nfunction dispatch (dispatch) {\n  return {\n    toggle: () => dispatch(toggle())\n  }\n}\n\nexport function connect (component) {\n  return reactRedux.connect(state, dispatch)(component)\n}\n","import React from 'react'\nimport './Staff.scss'\n\nimport Vex from 'vexflow'\n\nfunction getStaffImage (note, clef) {\n  const VF = Vex.Flow\n\n  // Create an SVG renderer and attach it to the DIV element named \"boo\".\n  var div = document.createElement('div')\n  var renderer = new VF.Renderer(div, VF.Renderer.Backends.SVG);\n\n  // Configure the rendering context.\n  renderer.resize(220, 220);\n  var context = renderer.getContext();\n  // context.setFont(\"Arial\", 10, \"\").setBackgroundFillStyle(\"#000\");\n\n  const treble = new VF.Stave(20, 0, 190)\n  treble.addClef(\"treble\")\n  treble.setContext(context).draw()\n\n  const bass = new VF.Stave(20, 100, 190)\n  bass.addClef(\"bass\")\n  bass.setContext(context).draw()\n\n  const connector = new VF.StaveConnector(treble, bass)\n  connector.setType('singleLeft')\n  connector.setContext(context).draw()\n\n  const brace = new VF.StaveConnector(treble, bass)\n  brace.setType('brace')\n  brace.setContext(context).draw()\n\n  const notes = [\n    new VF.StaveNote({ clef, keys: [note], duration: \"w\" })\n  ]\n\n  // Create a voice in 4/4 and add above notes\n  var voice = new VF.Voice({ num_beats: 4, beat_value: 4 });\n  voice.addTickables(notes);\n\n  // Format and justify the notes to 400 pixels.\n  var formatter = new VF.Formatter().joinVoices([voice]).format([voice], 150);\n\n  // Render voice\n  console.log(clef)\n  voice.draw(context, clef === 'treble' ? treble : bass);\n\n\n  const src = new XMLSerializer().serializeToString(div.querySelector('svg'))\n  return `data:image/svg+xml;base64,${window.btoa(src)}`\n}\n\nexport default function Staff ({ note, clef }) {\n  return (\n    <div id=\"boo\" className=\"Staff\">\n      <img src={getStaffImage(note, clef)} />\n    </div>\n  )\n}\n","import Staff from './Staff'\nexport default Staff\n","import React, { Component } from 'react'\nimport './App.css'\n\nimport { connect } from './App.props'\nimport Staff from '../Staff'\n\nconst notesByClef = {\n  treble: ['c/4', 'g/4', 'c/5', 'g/5', 'c/6'],\n  bass: ['c/4', 'f/3', 'c/3', 'f/2', 'c/2']\n}\n\nclass ConnectedApp extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      note: 'c/4',\n      clef: 'treble',\n      visible: false\n    }\n  }\n\n  get onClickHandler () {\n    return () => this.setState(prev => {\n      if (!prev.visible) {\n        return { visible: true }\n      }\n\n      const clef = Math.random() < 0.5 ? 'treble' : 'bass'\n      const noteIndex = (notesByClef[clef].length * Math.random())|0\n      const note = notesByClef[clef][noteIndex]\n      return { visible: false, note, clef }\n    })\n  }\n\n  render () {\n    const { note, clef, visible } = this.state\n    return (\n      <div className=\"App\" onClick={this.onClickHandler}>\n        <h1>Landmark</h1>\n        <br />\n        <Staff note={note} clef={clef} />\n        <div className=\"Answer\">{visible ? note.replace('/', '').toUpperCase() : '?'}</div>\n      </div>\n    )\n  }\n}\n\nconst App = connect(ConnectedApp)\nexport default App\n","import App from './App'\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux'\n\nimport settingsReducer from './settings'\n\nconst rootReducer = combineReducers({\n  settings: settingsReducer\n})\n\nexport default rootReducer\n","import { createStore } from 'redux'\nimport rootReducer from './reducers/root'\n\nconst DEVELOPMENT = true\n\nfunction loadSavedState () {\n  const storedState = localStorage.getItem('reduxState')\n  return storedState ? JSON.parse(storedState) : {}\n}\n\nfunction saveState () {\n  return DEVELOPMENT ? saveStateDev() : saveStateProd()\n}\n\nfunction saveStateProd () {\n  const state = store.getState()\n  localStorage.setItem('reduxState', JSON.stringify({ }))\n}\n\nfunction saveStateDev () {\n  const state = store.getState()\n  localStorage.setItem('reduxState', JSON.stringify({ }))\n}\n\nconst store = createStore(rootReducer, loadSavedState())\nstore.subscribe(saveState)\n\nwindow.store = {\n  reset () {\n    localStorage.removeItem('reduxState')\n    window.location.reload()\n  },\n  get state () {\n    return store.getState()\n  },\n  dispatch (action) {\n    return store.dispatch(action)\n  }\n}\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}